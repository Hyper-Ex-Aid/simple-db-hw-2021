package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 * Join运算符实现关系连接操作
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p;
    private final OpIterator child1;
    private final OpIterator child2;
    private Tuple tuple1;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.p=p;
        this.child1=child1;
        this.child2=child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     *       连接字段1的字段名，应通过别名或表名进行量化
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child2.close();
        child1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //笛卡尔积

        while(child1.hasNext()||tuple1!=null){
            //每一次遍历时，先确定child1的元组
            if(child1.hasNext()&&tuple1==null){
                tuple1=child1.next();
            }
            //之后开始用child2的每一个元组与child1的元组进行全连接
            while (child2.hasNext()){
                Tuple tuple2 = child2.next();
                //判断是否满足连接条件，如果满足，则进行连接操作，即创建新的元组，并返回
                if(p.filter(tuple1,tuple2)){
                    //新的全连接元组中的每一个新的元组，都包含child1与child2，所以新元组的TupleDesc是两个元组的merge
                    TupleDesc newTupleDesc = TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());
                    //创建新元组
                    Tuple newTuple = new Tuple(newTupleDesc);
                    //设置路径
                    newTuple.setRecordId(tuple1.getRecordId());
                    //合并
                    //往里面添加字段
                    int i=0;
                    for(;i<tuple1.getTupleDesc().numFields();i++){
                        newTuple.setField(i,tuple1.getField(i));
                    }
                    for(int j =0;j<tuple2.getTupleDesc().numFields();j++){
                        newTuple.setField(i+j,tuple2.getField(j));
                    }
                    //遍历完tuple2后，重置，准备遍历下一个
                    if(!child2.hasNext()){
                        child2.rewind();
                        tuple1=null;
                    }
                    return newTuple;
                }
            }
            //都遍历结束，重置child2，从头开始与下一个child1的元组进行全连接
            child2.rewind();
            tuple1=null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
